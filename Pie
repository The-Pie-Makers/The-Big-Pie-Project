################################################################################################
# Group Members: Alan King, Zach Guillot, Robin Epperson, Hunter Allen
# Date Due: 5-12-2017
# Description: Code for the Great Pie Project. This what we will submit for cyberstorm.
################################################################################################

# Required import list for program to run
import RPi.GPIO as GPIO, time, os
from Tkinter import *

# GPIO.setwarnings(False)


# setup the input buttons
redB = 17
greenB = 27
blueB = 22

DEBUG = 1
GPIO.setmode(GPIO.BCM)

# setup the input pins
GPIO.setup(redB, GPIO.IN, GPIO.PUD_DOWN)
GPIO.setup(greenB, GPIO.IN, GPIO.PUD_DOWN)
GPIO.setup(blueB, GPIO.IN, GPIO.PUD_DOWN)

# This is basic photoresistor reading. We will modify it as necessary.

def RCtime(RCpin):
    reading = 0
    GPIO.setup(RCpin, GPIO.OUT)
    GPIO.output(RCpin, GPIO.LOW)
    time.sleep(0.1)
    GPIO.setup(RCpin, GPIO.IN)
    while ((GPIO.input(RCpin)) == GPIO.LOW):
        reading += 1
    return reading

# End of the basic Photoresitor

# This is the GUI
class Game():
    def __init__(self, parent):
        # call the constructor in the superclass
        Frame.__init__(self, parent)
		
    def setupGUI(self):
	#organize the GUI
        self.pack(fill = BOTH, expand = 1)

	#setup player input
        Game.player_input = Entry(self, bg = "white")
        Game.player_input.bind("<Return>", self.process)
        Game.player_input.pack(side = BOTTOM, fill = X)
        Game.player_input.focus()
		
	#setup the image
        img = None
        Game.image = Label(self, width = WIDTH / 2, image = img)
        Game.image.image = img
        Game.image.pack(side = LEFT, fill = Y)
        Game.image.pack_propagate(False)

	#setup the text
        text_frame = Frame(self, width = WIDTH / 2 * 1.5)
        Game.text = Text(text_frame, bg = "lightgrey", state = DISABLED)
        Game.text.pack(fill = Y, expand = 1)
        text_frame.pack(side = RIGHT, fill = Y) 
        text_frame.pack_propagate(False)

# This is rhe test for button inputs and the required response to each circumstance.
try:
    while(True):
        if (GPIO.input(redB) == True and GPIO.input(greenB) == True and GPIO.input(blueB) == True):
            print "I am WHITE"
            while (GPIO.input(redB) == True and GPIO.input(greenB) == True and GPIO.input(blueB) == True):
                 print RCtime(18)

        elif (GPIO.input(redB) == True and GPIO.input(greenB) == True):
            print "I am BROWN"
            while (GPIO.input(redB) == True and GPIO.input(greenB) == True):
                if (GPIO.input(blueB) == True):
                    break

        elif (GPIO.input(redB) == True and GPIO.input(blueB) == True):
            print "I Am VIOLET"
            while (GPIO.input(redB) == True and GPIO.input(blueB) == True):
                if (GPIO.input(greenB) == True):
                    break
			
        elif (GPIO.input(greenB) == True and GPIO.input(blueB) == True):
            print "I Am AQUA"
            while (GPIO.input(greenB) == True and GPIO.input(blueB) == True):
                if (GPIO.input(redB) == True):
                    break
			
        elif (GPIO.input(redB) == True):
            print "I Am RED"
            while (GPIO.input(redB) == True):
                if (GPIO.input(greenB) == True or GPIO.input(blueB) == True):
                    break
    		
        elif (GPIO.input(greenB) == True):
            print "I Am GREEN"
            while (GPIO.input(greenB) == True):
                if (GPIO.input(redB) == True or GPIO.input(blueB) == True):
                    break
            
        elif (GPIO.input(blueB) == True):
            print "I Am BLUE"
            while (GPIO.input(blueB) == True):
                if (GPIO.input(redB) == True or GPIO.input(greenB) == True):
                    break
			
        else:
            print "I Am Nothing"
            while (GPIO.input(redB) == False and GPIO.input(greenB) == False and GPIO.input(blueB) == False):
                pass
          

except:
    print "This is the except running"

# cleans the breadboard
GPIO.cleanup()

#window = Tk()
#window.title("Specularity Game")		
	
#window.mainloop()
