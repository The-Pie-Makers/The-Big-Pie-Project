################################################################################################
# Group Members: Alan King, Zach Guillot, Robin Epperson, Hunter Allen
# Date Due: 5-12-2017
# Description: Code for the Great Pie Project. This what we will submit for cyberstorm.
################################################################################################

# Required import list for program to run
import pygame
import Rpi.GPIO as GPIO, time, os
from Tkinter import *

GPIO.setwarning(False)
pygame.init()

# Seting up the LED pins
red = 23
green = 24
blue = 25

# setup the input buttons
redB = 22
greenB = 27
blueB = 17

# setup the input pins
GPIO.setup(redB, GPIO.IN, GPIO.PUD_DOWN)
GPIO.setup(greenB, GPIO.IN, GPIO.PUD_DOWN)
GPIO.setup(blueB, GPIO.IN, GPIO.PUD_DOWN)

# setup the output pins
GPIO.setup(red, GPIO.OUT)
GPIO.setup(green, GPIO.OUT)
GPIO.setup(blue, GPIO.OUT)

class Photoresistor():
	# This is basic photoresistor reading. We will modify it as necessary.
	DEBUG = 1
	GPIO.setmode(GPIO.BCM)

	def RCtime(RCpin):
		reading = 0
		GPIO.setup(RCpin, GPIO.OUT)
		GPIO.output(RCpin, GPIO.LOW)
		time.sleep(0.1)
	
		GPIO.setup(RCpin, GPIO.IN)
		while (GPIO.input(RCpin)) == GPIO.LOW):
			reading += 1
		return reading
	
	while True:
		print RCtime(18) # read RC timing using pin #18
	# End of basic photoresistor reading.
	
class Game():
	def __init__(self, parent):
		# call the constructor in the superclass
		Frame.__init__(self, parent)
		
	def setupGUI(self):
		#organize the GUI
		self.pack(fill = BOTH, expand = 1)

		#setup player input
		Game.player_input = Entry(self, bg = "white")
		Game.player_input.bind("<Return>", self.process)
		Game.player_input.pack(side = BOTTOM, fill = X)
		Game.player_input.focus()
		
		#setup the image
		img = None
		Game.image = Label(self, width = WIDTH / 2, image = img)
		Game.image.image = img
		Game.image.pack(side = LEFT, fill = Y)
		Game.image.pack_propagate(False)

		#setup the text
		text_frame = Frame(self, width = WIDTH / 2 * 1.5)
		Game.text = Text(text_frame, bg = "lightgrey", state = DISABLED)
		Game.text.pack(fill = Y, expand = 1)
		text_frame.pack(side = RIGHT, fill = Y) 
		text_frame.pack_propagate(False)
try:
	while (True):
	
		if (GPIO.input(redB) == True and GPIO.input(greenB) == True and GPIO.input(blueB) == True):
			GPIO.output(red, True)
			GPIO.output(green, True)
			GPIO.output(blue, True)
		
		elif (GPIO.input(redB) == True and GPIO.input(greenB) == True):
			GPIO.output(red, True)
			GPIO.output(green, True)
			GPIO.output(blue, False)
			
		elif (GPIO.input(redB) == True and GPIO.input(blueB) == True):
			GPIO.output(red, True)
			GPIO.output(green, False)
			GPIO.output(blue, True)
			
		elif (GPIO.input(greenB) == True and GPIO.input(blueB) == True):
			GPIO.output(red, False)
			GPIO.output(green, True)
			GPIO.output(blue, True)
			
		elif (GPIO.input(redB) == True):
			GPIO.output(red, True)
			GPIO.output(green, False)
			GPIO.output(blue, False)
			
		elif (GPIO.input(greenB) == True):
			GPIO.output(red, False)
			GPIO.output(green, True)
			GPIO.output(blue, False)
			
		elif (GPIO.input(blueB) == True):
			GPIO.output(red, False)
			GPIO.output(green, False)
			GPIO.output(blue, True)
			
		else:
			GPIO.output(red, False)
			GPIO.output(green, False)
			GPIO.output(blue, False)
			
window = Tk()
window.title("Specularity Game")		
	
window.mainloop()
